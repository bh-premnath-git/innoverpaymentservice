x-svc-env: &svc_env
  OIDC_ISSUER: ${OIDC_ISSUER:-http://keycloak:8080/realms/innover}
  OIDC_AUDIENCE: ${OIDC_AUDIENCE:-kong}
  OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
  REDIS_PASSWORD: ${REDIS_PASSWORD:-redis-secret}
x-default-deploy: &default_deploy
  resources:
    limits:
      cpus: "0.50"
      memory: 512M

x-worker-deploy: &worker_deploy
  resources:
    limits:
      cpus: "0.75"
      memory: 768M

x-db-deploy: &db_deploy
  resources:
    limits:
      cpus: "2.00"
      memory: 2G

x-support-deploy: &support_deploy
  resources:
    limits:
      cpus: "1.00"
      memory: 1G

x-light-deploy: &light_deploy
  resources:
    limits:
      cpus: "0.25"
      memory: 256M

x-cockroach-healthcheck: &cockroach_healthcheck
  test: ["CMD", "/cockroach/cockroach", "sql", "--insecure", "--host=localhost:26257", "-e", "SELECT 1"]
  interval: 10s
  timeout: 10s
  retries: 10
  start_period: 60s

services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1G
    restart: unless-stopped

  otel-collector:
    build:
      context: .
      dockerfile: otel/Dockerfile
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/collector.yaml:/etc/otelcol/config.yaml:ro
    depends_on:
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:13133/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy: *support_deploy
    restart: unless-stopped

  keycloak:
    build:
      context: ./keycloak
    command: ["start-dev", "--import-realm"]
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD:-admin}
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/9000 && echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n' >&3 && cat <&3 | grep -q '200 OK'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.50"
          memory: 1.5G
    restart: unless-stopped

  kong:
    build: ./kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_LOG_LEVEL: notice
      KONG_PLUGINS: "bundled,openid-connect"
      KONG_LUA_PACKAGE_PATH: "/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;;"
      KONG_OIDC_CLIENT_SECRET: ${KONG_OIDC_CLIENT_SECRET?KONG_OIDC_CLIENT_SECRET must be set}
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy: *support_deploy
    restart: unless-stopped

  # -------- CockroachDB Cluster --------
  cockroach1:
    image: cockroachdb/cockroach:v24.2.5
    hostname: cockroach1
    container_name: cockroach1
    command:
      - start
      - --insecure
      - --listen-addr=cockroach1:26357
      - --advertise-addr=cockroach1:26357
      - --sql-addr=cockroach1:26257
      - --http-addr=cockroach1:8080
      - --join=cockroach1:26357,cockroach2:26357,cockroach3:26357
      - --cache=.25
      - --max-sql-memory=.25
    ports:
      - "26257:26257"   # SQL
      - "8082:8080"     # Admin UI
    volumes:
      - cockroach1:/cockroach/cockroach-data
    healthcheck:
      test: ["CMD", "/cockroach/cockroach", "sql", "--insecure", "--host=cockroach1:26257", "-e", "SELECT 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped
    deploy: *db_deploy

  cockroach2:
    image: cockroachdb/cockroach:v24.2.5
    hostname: cockroach2
    container_name: cockroach2
    command:
      - start
      - --insecure
      - --listen-addr=cockroach2:26357
      - --advertise-addr=cockroach2:26357
      - --sql-addr=cockroach2:26257
      - --http-addr=cockroach2:8080
      - --join=cockroach1:26357,cockroach2:26357,cockroach3:26357
      - --cache=.25
      - --max-sql-memory=.25
    volumes:
      - cockroach2:/cockroach/cockroach-data
    depends_on:
      cockroach1:
        condition: service_started
    healthcheck:
      test: ["CMD", "/cockroach/cockroach", "sql", "--insecure", "--host=cockroach2:26257", "-e", "SELECT 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped
    deploy: *db_deploy

  cockroach3:
    image: cockroachdb/cockroach:v24.2.5
    hostname: cockroach3
    container_name: cockroach3
    command:
      - start
      - --insecure
      - --listen-addr=cockroach3:26357
      - --advertise-addr=cockroach3:26357
      - --sql-addr=cockroach3:26257
      - --http-addr=cockroach3:8080
      - --join=cockroach1:26357,cockroach2:26357,cockroach3:26357
      - --cache=.25
      - --max-sql-memory=.25
    volumes:
      - cockroach3:/cockroach/cockroach-data
    depends_on:
      cockroach2:
        condition: service_started
    healthcheck:
      test: ["CMD", "/cockroach/cockroach", "sql", "--insecure", "--host=cockroach3:26257", "-e", "SELECT 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped
    deploy: *db_deploy

  cockroach-init-cluster:
    image: cockroachdb/cockroach:v24.2.5
    container_name: cockroach-init-cluster
    entrypoint: []
    command:
      - /bin/sh
      - -c
      - |
        set -e
        echo "Waiting for all nodes to be reachable..."
        
        # Simple HTTP health check (nodes respond even before init)
        for node in cockroach1 cockroach2 cockroach3; do
          echo "Checking $${node}..."
          until curl -f http://$${node}:8080/health >/dev/null 2>&1; do
            echo "Waiting for $${node}..."
            sleep 2
          done
          echo "$${node} is up"
        done

        echo "All nodes are up. Waiting 20s for gossip to stabilize..."
        sleep 20

        echo "Initializing CockroachDB cluster..."
        /cockroach/cockroach init --insecure --host=cockroach1:26357 || echo "Cluster already initialized"
    depends_on:
      cockroach1:
        condition: service_healthy
      cockroach2:
        condition: service_healthy
      cockroach3:
        condition: service_healthy
    restart: "no"
    deploy: *default_deploy

  # Database and user creation
  cockroach-bootstrap:
    image: cockroachdb/cockroach:v24.2.5
    container_name: cockroach-bootstrap
    entrypoint: []
    command:
      - /bin/sh
      - -c
      - |
        set -e
        echo "Waiting for cluster to accept SQL connections..."
        max_attempts=30
        attempt=0
        while [ $$attempt -lt $$max_attempts ]; do
          if /cockroach/cockroach sql --insecure --host=cockroach1:26257 -e 'SELECT 1' >/dev/null 2>&1; then
            echo "SQL is ready!"
            break
          fi
          echo "Attempt $$((attempt+1))/$$max_attempts: SQL not ready, waiting..."
          sleep 3
          attempt=$$((attempt+1))
        done
        [ $$attempt -lt $$max_attempts ] || { echo "SQL not ready in time"; exit 1; }

        echo "Creating database and user..."
        /cockroach/cockroach sql --insecure --host=cockroach1:26257 <<'EOF'
        CREATE DATABASE IF NOT EXISTS innover;
        CREATE USER IF NOT EXISTS fin;
        GRANT ALL ON DATABASE innover TO fin;
        SELECT 'Database setup complete' AS status;
        EOF
        echo "Bootstrap completed successfully!"
    depends_on:
      cockroach-init-cluster:
        condition: service_completed_successfully
    restart: "no"
    deploy: *default_deploy

  # -------- Application Services --------
  profile:
    build: ./services/profile
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-profile
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped

  profile-worker:
    build: ./services/profile
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "profile-worker@%h",
        "--queues",
        "profile-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-profile-worker
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped

  payment:
    build: ./services/payment
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-payment
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped

  payment-worker:
    build: ./services/payment
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "payment-worker@%h",
        "--queues",
        "payment-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-payment-worker
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped

  ledger:
    build: ./services/ledger
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-ledger
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped

  ledger-worker:
    build: ./services/ledger
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "ledger-worker@%h",
        "--queues",
        "ledger-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-ledger-worker
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped

  wallet:
    build: ./services/wallet
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-wallet
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped

  wallet-worker:
    build: ./services/wallet
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "wallet-worker@%h",
        "--queues",
        "wallet-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-wallet-worker
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped

  rule-engine:
    build: ./services/rule-engine
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-rules
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/health')"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3
    deploy: *default_deploy
    restart: unless-stopped

  rule-engine-worker:
    build: ./services/rule-engine
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "rule-engine-worker@%h",
        "--queues",
        "rule-engine-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-rules-worker
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A celery_app.celery_app inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    deploy: *worker_deploy
    restart: unless-stopped

  forex:
    build: ./services/forex
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-forex
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped

  forex-worker:
    build: ./services/forex
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "forex-worker@%h",
        "--queues",
        "forex-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-forex-worker
      DB_URL: postgresql+psycopg2://fin@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_healthy
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped

  # -------- Infrastructure Services --------
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis-secret}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-redis-secret}"]
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD-SHELL", "if [ -n \"$$REDIS_PASSWORD\" ]; then redis-cli -a \"$$REDIS_PASSWORD\" ping; else redis-cli ping; fi | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy: *light_deploy
    restart: unless-stopped

  redpanda:
    image: redpandadata/redpanda:v24.2.13
    command:
      - redpanda start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - 512M
      - --reserve-memory
      - 0M
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://redpanda:9092"
      - --rpc-addr
      - "0.0.0.0:33145"
      - --advertise-rpc-addr
      - "redpanda:33145"
    ports:
      - "9092:9092"
    volumes:
      - redpanda:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health --exit-when-healthy"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.50"
          memory: 1.5G
    restart: unless-stopped

volumes:
  cockroach1:
  cockroach2:
  cockroach3:
  redpanda: