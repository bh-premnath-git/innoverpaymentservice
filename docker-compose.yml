x-svc-env: &svc_env
  OIDC_ISSUER: ${OIDC_ISSUER:-http://keycloak:8080/realms/innover}
  OIDC_AUDIENCE: ${OIDC_AUDIENCE:-kong}
  OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}

x-cockroach-healthcheck: &cockroach_healthcheck
  test: ["CMD-SHELL", "curl -fsS http://$(hostname -f):8080/health?ready=1"]
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 30s

services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/collector.yaml:/etc/otelcol/config.yaml:ro
    depends_on:
      - jaeger

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: ["start-dev", "--import-realm"]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    ports:
      - "8081:8080"

  kong:
    build: ./kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_LOG_LEVEL: notice
      KONG_PLUGINS: "bundled,openid-connect"
      KONG_LUA_PACKAGE_PATH: "/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;;"
      KONG_OIDC_CLIENT_SECRET: ${KONG_OIDC_CLIENT_SECRET:-kong-secret}
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    ports:
      - "8000:8000"
      - "8001:8001"
    depends_on:
      - keycloak

  # -------- CockroachDB Cluster --------
  cockroach1:
    image: cockroachdb/cockroach:v24.2.5
    hostname: cockroach1
    container_name: cockroach1
    command:
      - start
      - --insecure
      - --listen-addr=cockroach1:26357
      - --advertise-addr=cockroach1:26357
      - --sql-addr=cockroach1:26257
      - --http-addr=cockroach1:8080
      - --join=cockroach1:26357,cockroach2:26357,cockroach3:26357
      - --cache=.25
      - --max-sql-memory=.25
    ports:
      - "26257:26257"   # SQL
      - "8082:8080"     # Admin UI
    volumes:
      - cockroach1:/cockroach/cockroach-data
    healthcheck: *cockroach_healthcheck
    restart: unless-stopped

  cockroach2:
    image: cockroachdb/cockroach:v24.2.5
    hostname: cockroach2
    container_name: cockroach2
    command:
      - start
      - --insecure
      - --listen-addr=cockroach2:26357
      - --advertise-addr=cockroach2:26357
      - --sql-addr=cockroach2:26257
      - --http-addr=cockroach2:8080
      - --join=cockroach1:26357,cockroach2:26357,cockroach3:26357
      - --cache=.25
      - --max-sql-memory=.25
    volumes:
      - cockroach2:/cockroach/cockroach-data
    depends_on:
      cockroach1:
        condition: service_started
    healthcheck: *cockroach_healthcheck
    restart: unless-stopped

  cockroach3:
    image: cockroachdb/cockroach:v24.2.5
    hostname: cockroach3
    container_name: cockroach3
    command:
      - start
      - --insecure
      - --listen-addr=cockroach3:26357
      - --advertise-addr=cockroach3:26357
      - --sql-addr=cockroach3:26257
      - --http-addr=cockroach3:8080
      - --join=cockroach1:26357,cockroach2:26357,cockroach3:26357
      - --cache=.25
      - --max-sql-memory=.25
    volumes:
      - cockroach3:/cockroach/cockroach-data
    depends_on:
      cockroach2:
        condition: service_started
    healthcheck: *cockroach_healthcheck
    restart: unless-stopped

  cockroach-init-cluster:
    image: cockroachdb/cockroach:v24.2.5
    container_name: cockroach-init-cluster
    command:
      - /bin/bash
      - -c
      - |
        set -e
        echo "Waiting for all nodes to be healthy..."
        
        # Wait for all three nodes to be reachable via their inter-node ports
        for node in cockroach1 cockroach2 cockroach3; do
          echo "Checking $${node}:26357..."
          until nc -z $${node} 26357; do
            echo "Waiting for $${node} inter-node port..."
            sleep 2
          done
          echo "$${node} is reachable on port 26357"
        done
        
        # Wait for HTTP health endpoints
        for node in cockroach1 cockroach2 cockroach3; do
          echo "Checking $${node} health endpoint..."
          until curl -fsS http://$${node}:8080/health?ready=1 >/dev/null 2>&1; do
            echo "Waiting for $${node} to be healthy..."
            sleep 2
          done
          echo "$${node} is healthy"
        done
        
        # Additional wait for gossip network formation
        echo "Waiting 30 seconds for gossip network to stabilize..."
        sleep 30
        
        # Initialize the cluster
        echo "Initializing CockroachDB cluster..."
        if cockroach init --insecure --host=cockroach1:26357; then
          echo "Cluster initialized successfully!"
        else
          exit_code=$$?
          if [ $$exit_code -eq 1 ]; then
            echo "Cluster already initialized (this is OK)"
            exit 0
          else
            echo "Failed to initialize cluster with exit code $$exit_code"
            exit $$exit_code
          fi
        fi
    depends_on:
      cockroach1:
        condition: service_healthy
      cockroach2:
        condition: service_healthy
      cockroach3:
        condition: service_healthy
    restart: "no"

  # Database and user creation
  cockroach-bootstrap:
    image: cockroachdb/cockroach:v24.2.5
    container_name: cockroach-bootstrap
    command:
      - /bin/bash
      - -c
      - |
        set -e
        echo "Waiting for cluster to accept SQL connections..."
        
        # Poll until we can successfully connect and run a query
        max_attempts=30
        attempt=0
        while [ $$attempt -lt $$max_attempts ]; do
          if cockroach sql --insecure --host=cockroach1:26257 -e 'SELECT 1' >/dev/null 2>&1; then
            echo "SQL is ready!"
            break
          fi
          echo "Attempt $$((attempt+1))/$$max_attempts: SQL not ready, waiting..."
          sleep 3
          attempt=$$((attempt+1))
        done
        
        if [ $$attempt -eq $$max_attempts ]; then
          echo "Failed to connect to SQL after $$max_attempts attempts"
          exit 1
        fi
        
        # Create database and user
        echo "Creating database and user..."
        cockroach sql --insecure --host=cockroach1:26257 <<EOF
        CREATE DATABASE IF NOT EXISTS innover;
        CREATE USER IF NOT EXISTS fin WITH PASSWORD 'finpass';
        GRANT ALL ON DATABASE innover TO fin;
        SELECT 'Database setup complete' as status;
        EOF
        
        echo "Bootstrap completed successfully!"
    depends_on:
      cockroach-init-cluster:
        condition: service_completed_successfully
    restart: "no"

  # -------- Application Services --------
  profile:
    build: ./services/profile
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-profile
      DB_URL: postgresql+psycopg2://fin:finpass@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_started
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_started
      redpanda:
        condition: service_started

  payment:
    build: ./services/payment
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-payment
      DB_URL: postgresql+psycopg2://fin:finpass@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_started
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_started
      redpanda:
        condition: service_started

  ledger:
    build: ./services/ledger
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-ledger
      DB_URL: postgresql+psycopg2://fin:finpass@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_started
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_started
      redpanda:
        condition: service_started

  wallet:
    build: ./services/wallet
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-wallet
      DB_URL: postgresql+psycopg2://fin:finpass@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_started
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_started
      redpanda:
        condition: service_started

  rule-engine:
    build: ./services/rule-engine
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-rules
      DB_URL: postgresql+psycopg2://fin:finpass@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_started
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_started
      redpanda:
        condition: service_started

  forex:
    build: ./services/forex
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-forex
      DB_URL: postgresql+psycopg2://fin:finpass@cockroach1:26257/innover?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    depends_on:
      otel-collector:
        condition: service_started
      cockroach-bootstrap:
        condition: service_completed_successfully
      redis:
        condition: service_started
      redpanda:
        condition: service_started

  # -------- Infrastructure Services --------
  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]

  redpanda:
    image: redpandadata/redpanda:v24.2.13
    command:
      - redpanda start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - 512M
      - --reserve-memory
      - 0M
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://redpanda:9092"
      - --rpc-addr
      - "0.0.0.0:33145"
      - --advertise-rpc-addr
      - "redpanda:33145"
    ports:
      - "9092:9092"
    volumes:
      - redpanda:/var/lib/redpanda/data

volumes:
  cockroach1:
  cockroach2:
  cockroach3:
  redpanda: