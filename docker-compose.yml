x-svc-env: &svc_env
  # OIDC configuration for WSO2 Identity Server (Financial-grade OAuth2)
  OIDC_ISSUER: ${OIDC_ISSUER:-https://wso2is:9444/oauth2/token}
  OIDC_AUDIENCE: ${OIDC_AUDIENCE:-wso2am}
  OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
  REDIS_PASSWORD: ${REDIS_PASSWORD:-redis-secret}

x-extra-hosts: &extra_hosts
  - "host.docker.internal:host-gateway"

x-db-deploy: &db_deploy
  resources:
    limits:
      cpus: "2.00"
      memory: 2G

x-support-deploy: &support_deploy
  resources:
    limits:
      cpus: "1.00"
      memory: 1G

x-light_deploy: &light_deploy
  resources:
    limits:
      cpus: "0.25"
      memory: 256M

x-default_deploy: &default_deploy
  resources:
    limits:
      cpus: "0.50"
      memory: 512M

x-worker_deploy: &worker_deploy
  resources:
    limits:
      cpus: "0.75"
      memory: 768M

networks:
  edge:
    driver: bridge

services:
  wso2is:
    build:
      context: ./wso2is
    environment:
      <<: *svc_env
      # Admin credentials for user initialization
      WSO2_IS_ADMIN_USERNAME: ${WSO2_IS_ADMIN_USERNAME:-admin}
      WSO2_IS_ADMIN_PASSWORD: ${WSO2_IS_ADMIN_PASSWORD:-admin}
    ports:
      - "9444:9444"  # HTTPS port for Identity Server
    volumes:
      - wso2is-data:/home/wso2carbon/wso2is-7.1.0/repository
      - ./wso2is/deployment.toml:/home/wso2carbon/wso2is-7.1.0/repository/conf/deployment.toml:ro
    extra_hosts: *extra_hosts
    healthcheck:
      test: ["CMD-SHELL", "curl -k -sf https://localhost:9444/carbon/admin/login.jsp || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 30
      start_period: 240s  # Increased for user initialization
    deploy:
      resources:
        limits:
          cpus: "1.50"
          memory: 1.5G
    restart: unless-stopped
    networks: [edge]

  wso2am:
    image: wso2/wso2am:4.5.0-alpine
    environment:
      <<: *svc_env
      OIDC_ISSUER: ${OIDC_ISSUER:-https://wso2is:9444/oauth2/token}
    ports:
      - "8280:8280"
      - "8243:8243"
      - "9443:9443"
    volumes:
      - wso2am-data:/home/wso2carbon/wso2am-4.5.0/repository
      - ./wso2/deployment.toml:/home/wso2carbon/wso2am-4.5.0/repository/conf/deployment.toml:ro
    extra_hosts: *extra_hosts
    healthcheck:
      test: ["CMD-SHELL", "wget --no-check-certificate --spider --quiet https://localhost:9443/services/Version || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 30
      start_period: 240s
    deploy: *support_deploy
    depends_on:
      wso2is:
        condition: service_healthy  # Wait for WSO2 IS to be fully ready
    restart: unless-stopped
    networks: [edge]

  # mkcert-setup: NOT NEEDED
  # WSO2 IS has built-in certificates (wso2carbon.p12)
  
  # nginx: NOT NEEDED
  # Only needed for Keycloak issuer consistency
  # WSO2 IS can be accessed directly at localhost:9444

  wso2is-init:
    build:
      context: ./wso2is
    container_name: wso2is-init
    environment:
      WSO2_IS_ADMIN_USERNAME: ${WSO2_IS_ADMIN_USERNAME:-admin}
      WSO2_IS_ADMIN_PASSWORD: ${WSO2_IS_ADMIN_PASSWORD:-admin}
    entrypoint: ["/bin/bash", "/home/wso2carbon/create-users.sh"]
    depends_on:
      wso2is:
        condition: service_healthy
    extra_hosts: *extra_hosts
    restart: "no"
    networks: [edge]

  wso2-setup:
    build:
      context: ./wso2
    container_name: wso2-setup
    environment:
      WSO2_HOST: https://wso2am:9443
      WSO2_IS_HOST: https://wso2is:9444
      WSO2_ADMIN_USERNAME: ${WSO2_ADMIN_USERNAME:-admin}
      WSO2_ADMIN_PASSWORD: ${WSO2_ADMIN_PASSWORD:-admin}
      API_CONFIG_FILE: /config/api-config.yaml
    entrypoint: ["python3", "/app/setup.py"]
    volumes:
      - ./wso2/api-config.yaml:/config/api-config.yaml:ro
      - ./wso2/output:/config
    depends_on:
      wso2am:
        condition: service_started  # setup.py has built-in retry logic
      wso2is-init:
        condition: service_completed_successfully
    extra_hosts: *extra_hosts
    restart: "no"
    networks: [edge]

  cockroach1:
    image: cockroachdb/cockroach:v24.2.4
    command: start-single-node --insecure --store=/cockroach/cockroach-data --listen-addr=:26257 --http-addr=:8082
    ports:
      - "26257:26257"
      - "8082:8082"
    volumes:
      - cockroachdb:/cockroach/cockroach-data
    healthcheck:
      test: ["CMD-SHELL", "/cockroach/cockroach sql --insecure --host=localhost:26257 --execute='SELECT 1;' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2.00"
          memory: 2G
    restart: unless-stopped
    networks: [edge]

  cockroach-init:
    image: cockroachdb/cockroach:v24.2.4
    environment:
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    depends_on:
      cockroach1:
        condition: service_healthy
    command: >
      bash -c "
        /cockroach/cockroach sql --insecure --host=$${DB_HOST}:$${DB_PORT} <<-EOSQL
          CREATE DATABASE IF NOT EXISTS $${DB_NAME};
        EOSQL
        echo 'Database $${DB_NAME} initialized successfully'
      "
    restart: "no"
    networks: [edge]

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4317:4317"
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1G
    restart: unless-stopped
    networks: [edge]

  otel-collector:
    build:
      context: .
      dockerfile: otel/Dockerfile
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel/collector.yaml:/etc/otelcol/config.yaml:ro
    depends_on:
      jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:13133/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks: [edge]
  
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis-secret}
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-redis-secret}"]
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD-SHELL", "if [ -n \"$$REDIS_PASSWORD\" ]; then redis-cli -a \"$$REDIS_PASSWORD\" ping; else redis-cli ping; fi | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy: *light_deploy
    restart: unless-stopped
    networks: [edge]

  redpanda:
    image: redpandadata/redpanda:v24.2.13
    command:
      - redpanda start
      - --overprovisioned
      - --smp
      - "1"
      - --memory
      - 512M
      - --reserve-memory
      - 0M
      - --node-id
      - "0"
      - --check=false
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://redpanda:9092"
      - --rpc-addr
      - "0.0.0.0:33145"
      - --advertise-rpc-addr
      - "redpanda:33145"
    ports:
      - "9092:9092"
    volumes:
      - redpanda:/var/lib/redpanda/data
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health --exit-when-healthy"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "1.50"
          memory: 1.5G
    restart: unless-stopped
    networks: [edge]
  
  # -------- Application Services --------
  profile:
    build: ./services/profile
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-profile
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    ports:
      - "8001:8000"  # Expose profile service
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped
    networks: [edge]

  profile-worker:
    build: ./services/profile
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "profile-worker@%h",
        "--queues",
        "profile-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-profile-worker
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped
    networks: [edge]

  payment:
    build: ./services/payment
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-payment
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    ports:
      - "8002:8000"  # Expose payment service
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped
    networks: [edge]

  payment-worker:
    build: ./services/payment
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "payment-worker@%h",
        "--queues",
        "payment-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-payment-worker
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped
    networks: [edge]

  ledger:
    build: ./services/ledger
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-ledger
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    ports:
      - "8003:8000"  # Expose ledger service
    depends_on:
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped
    networks: [edge]

  ledger-worker:
    build: ./services/ledger
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "ledger-worker@%h",
        "--queues",
        "ledger-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-ledger-worker
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped
    networks: [edge]

  wallet:
    build: ./services/wallet
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-wallet
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    ports:
      - "8004:8000"  # Expose wallet service
    depends_on:
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped
    networks: [edge]

  wallet-worker:
    build: ./services/wallet
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "wallet-worker@%h",
        "--queues",
        "wallet-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-wallet-worker
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped
    networks: [edge]

  rule-engine:
    build: ./services/rule-engine
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-rules
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    ports:
      - "8005:8000"  # Expose rule-engine service
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://127.0.0.1:8000/health')"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3
    deploy: *default_deploy
    restart: unless-stopped
    networks: [edge]

  rule-engine-worker:
    build: ./services/rule-engine
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "rule-engine-worker@%h",
        "--queues",
        "rule-engine-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-rules-worker
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A celery_app.celery_app inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    deploy: *worker_deploy
    restart: unless-stopped
    networks: [edge]

  forex:
    build: ./services/forex
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-forex
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    ports:
      - "8006:8000"  # Expose forex service
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *default_deploy
    restart: unless-stopped
    networks: [edge]

  forex-worker:
    build: ./services/forex
    working_dir: /app
    command:
      [
        "celery",
        "-A",
        "celery_app.celery_app",
        "worker",
        "-l",
        "info",
        "--concurrency",
        "2",
        "--hostname",
        "forex-worker@%h",
        "--queues",
        "forex-tasks"
      ]
    environment:
      <<: *svc_env
      SERVICE_NAME: svc-forex-worker
      DB_URL: postgresql+psycopg2://${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis-secret}@redis:6379/0
      KAFKA_BROKERS: redpanda:9092
    extra_hosts: *extra_hosts
    depends_on:
      cockroach1:
        condition: service_healthy
      otel-collector:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    deploy: *worker_deploy
    restart: unless-stopped
    networks: [edge]

volumes:
  wso2is-data:
  wso2am-data:
  redpanda:
  cockroachdb:
